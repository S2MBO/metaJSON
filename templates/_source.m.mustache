//
//  {{machineClassName}}.m
//
//  Created by MetaJSONParser.
//  Copyright (c) {{date}} SinnerSchrader Mobile. All rights reserved.

#import "{{projectPrefix}}APIParser.h"
#import "NSString+RegExValidation.h"
#import "{{humanClassName}}.h"


@implementation {{machineClassName}}

#pragma mark - factory

+ ({{humanClassName}} *){{variableName}}WithDictionary:(NSDictionary *)dic withError:(NSError **)error
{
    return [[{{humanClassName}} alloc] initWithDictionary:dic withError:error];
}

#pragma mark - initialize
- (id)initWithDictionary:(NSDictionary *)dic  withError:(NSError **)error
{
    {{#baseTypeIsObject}}
    self = [super init];
    {{/baseTypeIsObject}}
    {{^baseTypeIsObject}}
    self = [super initWithDictionary:dic withError:error];
    {{/baseTypeIsObject}}
    if (self) {
        {{#numberProperties}}
        self.{{varName}} = [{{projectPrefix}}APIParser numberFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/numberProperties}}
        {{#stringProperties}}
        self.{{varName}} = [{{projectPrefix}}APIParser stringFromResponseDictionary:dic forKey:@"{{name}}" acceptNumber:NO acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{#regex}}
        if (self.{{varName}} && [self.{{varName}} matchesRegExString:@"{{& value}}"] == NO) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{projectPrefix}}ErrorDomain_parser code:k{{projectPrefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/regex}}
        {{#maxLength}}
        if (self.{{varName}}.length > {{value}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"max length validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{projectPrefix}}ErrorDomain_parser code:k{{projectPrefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/maxLength}}
        {{#minLength}}
        if (self.{{varName}}.length < {{value}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"min length validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{projectPrefix}}ErrorDomain_parser code:k{{projectPrefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/minLength}}
        {{/stringProperties}}
        {{#booleanProperties}}
        self.{{varName}} = [{{projectPrefix}}APIParser boolFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/booleanProperties}}
        {{#dataProperties}}
        self.{{varName}} = [{{projectPrefix}}APIParser dataFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/dataProperties}}
        {{#dateProperties}}
        self.{{varName}} = [{{projectPrefix}}APIParser dateWithTimeIntervalFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/dateProperties}}
        {{#arrayProperties}}
        {{^hasOneSubtype}}
        self.{{varName}} = [{{projectPrefix}}APIParser arrayFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/hasOneSubtype}}
        {{#hasOneSubtype}}
        NSArray *tmp{{capitalizeVarName}}Array = [{{projectPrefix}}APIParser arrayFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        NSMutableArray *tmp{{capitalizeVarName}} = [[NSMutableArray alloc] initWithCapacity:tmp{{capitalizeVarName}}Array.count];
        for (NSUInteger loop = 0; loop < tmp{{capitalizeVarName}}Array.count; loop++) {
            {{#hasStringType}}
            NSString *tmpValue = [{{projectPrefix}}APIParser stringFromResponseArray:tmp{{capitalizeVarName}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasStringType}}
            {{#hasNumberType}}
            NSNumber *tmpValue = [{{projectPrefix}}APIParser numberFromResponseArray:tmp{{capitalizeVarName}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasNumberType}}
            {{#hasDateType}}
            NSDate *tmpValue = [{{projectPrefix}}APIParser dateFromResponseArray:tmp{{capitalizeVarName}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasDateType}}
            if (*error) {
                return self;
            }
            if (tmpValue) {
                [tmp{{capitalizeVarName}} addObject:tmpValue];
            }
        }
        self.{{varName}} = [NSArray arrayWithArray:tmp{{capitalizeVarName}}];
        {{/hasOneSubtype}}
        {{/arrayProperties}}
        {{#objectProperties}}
        {{/objectProperties}}
        {{#undefinedProperties}}
        {{/undefinedProperties}}
    }
    return self;
}

#pragma mark - getter
{{#arrayProperties}}
{{#hasMultipleSubtypes}}
{{#hasCustomType}}
{{#subtypes}}
{{#className}}

- ({{className}} *){{subtype}}In{{capitalizeVarName}}AtIndex:(NSUInteger)index withError:(NSError **)error
{

}
{{/className}}
{{/subtypes}}
{{/hasCustomType}}
{{#hasStringType}}
{{#subtypes}}

- (NSString *){{subtype}}In{{capitalizeVarName}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSString *tmp{{capitalizeVarName}} = [{{projectPrefix}}APIParser stringFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{capitalizeVarName}};
}
{{/subtypes}}
{{/hasStringType}}
{{#hasNumberType}}
{{#subtypes}}

- (NSNumber *){{subtype}}In{{capitalizeVarName}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSNumber *tmp{{capitalizeVarName}} = [{{projectPrefix}}APIParser numberFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{capitalizeVarName}};
}
{{/subtypes}}
{{/hasNumberType}}
{{#hasDateType}}
{{#subtypes}}

- (NSDate *){{subtype}}In{{capitalizeVarName}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSDate *tmp{{capitalizeVarName}} = [{{projectPrefix}}APIParser dateWithTimeIntervalFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{capitalizeVarName}};
}
{{/subtypes}}
{{/hasDateType}}
{{/hasMultipleSubtypes}}
{{/arrayProperties}}
{{#undefinedProperties}}
{{/undefinedProperties}}

#pragma mark - NSCoding

- (void)encodeWithCoder:(NSCoder*)coder
{
    [super encodeWithCoder:coder];
    {{#numberProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/numberProperties}}
    {{#stringProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/stringProperties}}
    {{#booleanProperties}}
    [coder encodeBool:self.{{varName}} forKey:@"{{name}}"];
    {{/booleanProperties}}
    {{#dataProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/dataProperties}}
    {{#dateProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/dateProperties}}
    {{#msDateProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/msDateProperties}}
    {{#arrayProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/arrayProperties}}
    {{#objectProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/objectProperties}}
    {{#undefinedProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/undefinedProperties}}
}

- (id)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    {{#numberProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/numberProperties}}
    {{#stringProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/stringProperties}}
    {{#booleanProperties}}
    self.{{varName}} = [coder decodeBoolForKey:@"{{name}}"];
    {{/booleanProperties}}
    {{#dataProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/dataProperties}}
    {{#dateProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/dateProperties}}
    {{#msDateProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/msDateProperties}}
    {{#arrayProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/arrayProperties}}
    {{#objectProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/objectProperties}}
    {{#undefinedProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/undefinedProperties}}
    return self;
}

#pragma mark - Object Info
- (NSDictionary *)propertyDictionary
{
    {{#baseTypeIsObject}}
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];
    {{/baseTypeIsObject}}
    {{^baseTypeIsObject}}
    NSMutableDictionary *dic = [[super propertyDictionary] mutableCopy];
    {{/baseTypeIsObject}}
    {{#numberProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/numberProperties}}
    {{#stringProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/stringProperties}}
    {{#booleanProperties}}
    if (self.{{varName}}) {
        [dic setObject:[NSNumber numberWithBool:self.{{varName}}] forKey:@"{{name}}"];
    }
    {{/booleanProperties}}
    {{#dataProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/dataProperties}}
    {{#dateProperties}}
    if (self.{{varName}}) {
        [dic setObject:[NSNumber numberWithInteger:[[NSNumber numberWithDouble:[self.{{varName}} timeIntervalSince1970]] longValue]] forKey:@"{{name}}"];
    }
    {{/dateProperties}}
    {{#arrayProperties}}
    {{^hasCustomType}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/hasCustomType}}
    {{/arrayProperties}}
    {{#objectProperties}}
    {{/objectProperties}}
    {{#undefinedProperties}}
    {{/undefinedProperties}}
    return dic;
}

{{#baseTypeIsObject}}
- (NSString *)description
{
    return [[self propertyDictionary] description];
}
{{/baseTypeIsObject}}

@end
