//
//  _{{prefix}}{{#_upper_camelcase}}{{name}}{{/_upper_camelcase}}{{suffix}}.m
//
//  Created by MetaJSONParser.
//  Copyright (c) {{date}} SinnerSchrader Mobile. All rights reserved.

#import "{{prefix}}APIParser.h"
#import "NSString+RegExValidation.h"
#import "{{prefix}}{{#_upper_camelcase}}{{name}}{{/_upper_camelcase}}{{suffix}}.h"
{{#custom_classes}}
#import "{{.}}.h"
{{/custom_classes}}


@implementation _{{prefix}}{{#_upper_camelcase}}{{name}}{{/_upper_camelcase}}{{suffix}}

#pragma mark - factory

+ ({{prefix}}{{#_upper_camelcase}}{{name}}{{/_upper_camelcase}}{{suffix}} *){{varName}}WithDictionary:(NSDictionary *)dic withError:(NSError **)error
{
    return [[{{prefix}}{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}{{suffix}} alloc] initWithDictionary:dic withError:error];
}

#pragma mark - initialize
- (id)initWithDictionary:(NSDictionary *)dic  withError:(NSError **)error
{
    {{#baseTypeIsObject}}
    self = [super init];
    {{/baseTypeIsObject}}
    {{^baseTypeIsObject}}
    self = [super initWithDictionary:dic withError:error];
    {{/baseTypeIsObject}}
    if (self) {
        {{#numberProperties}}
        self.{{varName}} = [{{prefix}}APIParser numberFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{#maxValue}}
        if (self.{{varName}}.length > {{maxValue}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"max value validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/maxValue}}
        {{#minValue}}
        if (self.{{varName}}.length < {{minValue}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"min value validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/minValue}}
        {{/numberProperties}}
        {{#stringProperties}}
        self.{{varName}} = [{{prefix}}APIParser stringFromResponseDictionary:dic forKey:@"{{name}}" acceptNumber:NO acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{#regex}}
        if (self.{{varName}} && [self.{{varName}} matchesRegExString:@"{{& regex}}"] == NO) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/regex}}
        {{#maxLength}}
        if (self.{{varName}}.length > {{maxLength}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"max length validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/maxLength}}
        {{#minLength}}
        if (self.{{varName}}.length < {{minLength}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"min length validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/minLength}}
        {{/stringProperties}}
        {{#booleanProperties}}
        self.{{varName}} = [{{prefix}}APIParser boolFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/booleanProperties}}
        {{#dataProperties}}
        self.{{varName}} = [{{prefix}}APIParser dataFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/dataProperties}}
        {{#dateProperties}}
        self.{{varName}} = [{{prefix}}APIParser dateWithTimeIntervalFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/dateProperties}}
        {{#arrayProperties}}
        {{^hasOneSubtype}}
        self.{{varName}} = [{{prefix}}APIParser arrayFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/hasOneSubtype}}
        {{#hasOneSubtype}}
        {{#hasAnyType}}
        self.{{varName}} = [{{prefix}}APIParser arrayFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        {{/hasAnyType}}
        {{^hasAnyType}}
        NSArray *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array = [{{prefix}}APIParser arrayFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        NSMutableArray *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [[NSMutableArray alloc] initWithCapacity:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array.count];
        for (NSUInteger loop = 0; loop < tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array.count; loop++) {
            {{#hasStringType}}
            NSString *tmpValue = [{{prefix}}APIParser stringFromResponseArray:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasStringType}}
            {{#hasNumberType}}
            NSNumber *tmpValue = [{{prefix}}APIParser numberFromResponseArray:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasNumberType}}
            {{#hasDateType}}
            NSDate *tmpValue = [{{prefix}}APIParser dateFromResponseArray:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array atIndex:loop acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
            {{/hasDateType}}
            {{^hasCustomType}}
            if (*error) {
                return self;
            }
            if (tmpValue) {
                [tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} addObject:tmpValue];
            }
            {{/hasCustomType}}
            {{#hasCustomType}}
            NSDictionary *tmpDic = [APIParser dictionaryFromResponseArray:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Array atIndex:loop acceptNil:NO error:error];
            if (*error) {
                return self;
            }
            {{#subtypes}}
            {{className}}*tmpObject = nil;
            if (tmpDic) {
                 tmpObject= [[{{className}} alloc] initWithDictionary:tmpDic withError:error];
                 if (*error) {
                     return self;
                 }
            }
            if (tmpObject) {
                 [tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} addObject:tmpObject];
            }
            {{/subtypes}}
            {{/hasCustomType}}
        }
        self.{{varName}} = [NSArray arrayWithArray:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}];
        {{/hasAnyType}}
        {{/hasOneSubtype}}
        {{#maxCount}}
        if (self.{{varName}}.count > {{maxCount}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"max count validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/maxCount}}
        {{#minCount}}
        if (self.{{varName}}.count < {{minCount}}) {
            NSDictionary *userInfo = @{@"propertyName" : @"{{varName}}",
                                       @"key" : @"{{name}}",
                                       @"reason" : @"min count validation error",
                                       @"objectClass" : NSStringFromClass([self class])
                                       };
            *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
            NSLog(@"%@", *error);
            return self;
        }
        {{/minCount}}
        {{/arrayProperties}}
        {{#objectProperties}}
        NSDictionary *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [APIParser dictionaryFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
        if (*error) {
            return self;
        }
        if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}) {
            self.{{varName}}= [[{{className}} alloc] initWithDictionary:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} withError:error];
            if (*error) {
                return self;
            }
        }
        {{/objectProperties}}
        {{#undefinedProperties}}
        self.{{varName}} = [APIParser objectFromResponseDictionary:dic forKey:@"{{name}}" acceptNil:NO error:error];
        if (*error) {
             return nil;
        }
        {{/undefinedProperties}}
    }
    return self;
}

#pragma mark - getter
{{#arrayProperties}}
{{#hasMultipleSubtypes}}
{{#hasCustomType}}
{{#subtypes}}
{{#className}}

- ({{className}} *){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSDictionary *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Dic = [APIParser dictionaryFromResponseArray:self.{{varName}} atIndex:index acceptNil:YES error:error];
    if (*error) {
        return nil;
    }
    {{className}} *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = nil;
    if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Dic== nil) {
        return nil;
    }
    if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Dic) {
        tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}= [[{{className}} alloc] initWithDictionary:tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}Dic withError:error];
        if (*error) {
            return nil;
        }
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/className}}
{{/subtypes}}
{{/hasCustomType}}
{{#hasNumberType}}
{{#subtypes}}

- (NSNumber *){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSNumber *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [{{prefix}}APIParser numberFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/subtypes}}
{{/hasNumberType}}
{{#hasStringType}}
{{#subtypes}}

- (NSString *){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSString *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [{{prefix}}APIParser stringFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    {{#_subtype.maxLength}}
    if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}.length > {{_subtype.maxLength}}) {
        NSDictionary *userInfo = @{@"propertyName" : @"{{_subtype.name}}",
                                   @"key" : @"{{_subtype.name}}",
                                   @"reason" : @"max length validation error",
                                   @"objectClass" : NSStringFromClass([self class])
                                   };
        *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
        NSLog(@"%@", *error);
        return nil;
    }
    {{/_subtype.maxLength}}
    {{#_subtype.minLength}}
    if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}.length < {{_subtype.minLength}}) {
        NSDictionary *userInfo = @{@"propertyName" : @"{{_subtype.name}}",
                                   @"key" : @"{{_subtype.name}}",
                                   @"reason" : @"min length validation error",
                                   @"objectClass" : NSStringFromClass([self class])
                                   };
        *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
        NSLog(@"%@", *error);
        return nil;
    }
    {{/_subtype.minLength}}
    {{! to finish need to pass customClass regex...}}
    {{#_subtype.regex}}
    if (tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} && [tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} matchesRegExString:@"{{& _subtype.regex}}"] == NO) {
        NSDictionary *userInfo = @{@"propertyName" : @"{{_subtype.name}}",
                                   @"key" : @"{{_subtype.name}}",
                                   @"reason" : @"validation error",
                                   @"objectClass" : NSStringFromClass([self class])
                                   };
        *error = [NSError errorWithDomain:k{{prefix}}ErrorDomain_parser code:k{{prefix}}ErrorDomain_parser_valueIsNotValid userInfo:userInfo];
        NSLog(@"%@", *error);
        return nil;
    }
    {{/_subtype.regex}}
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/subtypes}}
{{/hasStringType}}
{{#hasBooleanType}}
{{#subtypes}}

- (BOOL){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    BOOL tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [{{prefix}}APIParser boolFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/subtypes}}
{{/hasBooleanType}}
{{#hasDateType}}
{{#subtypes}}

- (NSDate *){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSDate *tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [{{prefix}}APIParser dateWithTimeIntervalFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/subtypes}}
{{/hasDateType}}
{{#hasDataType}}
{{#subtypes}}

- (NSData*){{subtype}}In{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    NSData* tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [{{prefix}}APIParser dataFromResponseArray:self.{{varName}} atIndex:index acceptNil:{{#required}}NO{{/required}}{{^required}}YES{{/required}} error:error];
    if (*error) {
        return nil;
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}
{{/subtypes}}
{{/hasDataType}}
{{/hasMultipleSubtypes}}
{{#hasAnyType}}
- (id)objectIn{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}}AtIndex:(NSUInteger)index withError:(NSError **)error
{
    id tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}} = [APIParser objectFromResponseArray:self.{{varName}} atIndex:index acceptNil:YES error:error];
    if (*error) {
        return nil;
    }
    return tmp{{#_upper_camelcase}}{{varName}}{{/_upper_camelcase}};
}

{{/hasAnyType}}
{{/arrayProperties}}
{{#undefinedProperties}}
{{> metajson/templates/iOS/AbstractInterfaceFiles/multiple_property_implementation}}
{{/undefinedProperties}}

#pragma mark - NSCoding

- (void)encodeWithCoder:(NSCoder*)coder
{
    [super encodeWithCoder:coder];
    {{#numberProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/numberProperties}}
    {{#stringProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/stringProperties}}
    {{#booleanProperties}}
    [coder encodeBool:self.{{varName}} forKey:@"{{name}}"];
    {{/booleanProperties}}
    {{#dataProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/dataProperties}}
    {{#dateProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/dateProperties}}
    {{#msDateProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/msDateProperties}}
    {{#arrayProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/arrayProperties}}
    {{#objectProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/objectProperties}}
    {{#undefinedProperties}}
    [coder encodeObject:self.{{varName}} forKey:@"{{name}}"];
    {{/undefinedProperties}}
}

- (id)initWithCoder:(NSCoder *)coder
{
    self = [super initWithCoder:coder];
    {{#numberProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/numberProperties}}
    {{#stringProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/stringProperties}}
    {{#booleanProperties}}
    self.{{varName}} = [coder decodeBoolForKey:@"{{name}}"];
    {{/booleanProperties}}
    {{#dataProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/dataProperties}}
    {{#dateProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/dateProperties}}
    {{#msDateProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/msDateProperties}}
    {{#arrayProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/arrayProperties}}
    {{#objectProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/objectProperties}}
    {{#undefinedProperties}}
    self.{{varName}} = [coder decodeObjectForKey:@"{{name}}"];
    {{/undefinedProperties}}
    return self;
}

#pragma mark - Object Info
- (NSDictionary *)propertyDictionary
{
    {{#baseTypeIsObject}}
    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];
    {{/baseTypeIsObject}}
    {{^baseTypeIsObject}}
    NSMutableDictionary *dic = [[super propertyDictionary] mutableCopy];
    {{/baseTypeIsObject}}
    {{#numberProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/numberProperties}}
    {{#stringProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/stringProperties}}
    {{#booleanProperties}}
    if (self.{{varName}}) {
        [dic setObject:[NSNumber numberWithBool:self.{{varName}}] forKey:@"{{name}}"];
    }
    {{/booleanProperties}}
    {{#dataProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/dataProperties}}
    {{#dateProperties}}
    if (self.{{varName}}) {
        [dic setObject:[NSNumber numberWithInteger:[[NSNumber numberWithDouble:[self.{{varName}} timeIntervalSince1970]] longValue]] forKey:@"{{name}}"];
    }
    {{/dateProperties}}
    {{#arrayProperties}}
    {{#hasMultipleSubtypes}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/hasMultipleSubtypes}}
    {{^hasMultipleSubtypes}}
    {{#hasCustomType}}
    {{#subtypes}}
    if (self.{{varName}}) {
        NSMutableArray *tmpArray = [[NSMutableArray alloc] init];
        for ({{className}} *tmpObj in self.{{varName}}) {
          [tmpArray addObject:[tmpObj propertyDictionary]];
        }
        [dic setObject:tmpArray forKey:@"{{name}}"];
    }
    {{/subtypes}}
    {{/hasCustomType}}
    {{^hasCustomType}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/hasCustomType}}
    {{/hasMultipleSubtypes}}
    {{/arrayProperties}}
    {{#objectProperties}}
    if (self.{{varName}}) {
        [dic setObject:[self.{{varName}} propertyDictionary] forKey:@"{{name}}"];
    }
    {{/objectProperties}}
    {{#undefinedProperties}}
    if (self.{{varName}}) {
        [dic setObject:self.{{varName}} forKey:@"{{name}}"];
    }
    {{/undefinedProperties}}
    return dic;
}

{{#baseTypeIsObject}}
- (NSString *)description
{
    return [[self propertyDictionary] description];
}
{{/baseTypeIsObject}}

@end
